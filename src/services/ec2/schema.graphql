type awsEc2MetadataOptions
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  state: String!
  httpTokens: String!
  httpPutResponseHopLimit: Int
  httpEndpoint: String!
}

type blockDeviceEbs
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  attachTime: String!
  deleteOnTermination: Boolean!
  status: String!
  volumeId: String! @id
}

type awsEc2Blockdevice
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  deviceName: String! @id
  ebs: blockDeviceEbs
}

type awsEc2 @key(fields: "arn") {
  id: String! @id @search(by: [hash])
  accountId: String! @search(by: [hash])
  arn: String! @id @search(by: [hash, regexp])
  region: String @search(by: [hash, regexp])
  ami: String @search(by: [hash, regexp])
  tenancy: String @search(by: [hash, regexp])
  elasticIps: String @search(by: [hash, regexp])
  publicDns: String @search(by: [hash, regexp])
  privateDns: String @search(by: [hash, regexp])
  monitoring: String @search(by: [hash, regexp])
  privateIps: String @search(by: [hash, regexp])
  keyPairName: String @search(by: [hash, regexp])
  cpuCoreCount: Int @search
  hibernation: String @search(by: [hash, regexp])
  ebsOptimized: String @search(by: [hash, regexp])
  ipv4PublicIp: String @search(by: [hash, regexp])
  instanceType: String @search(by: [hash, regexp])
  ipv6Addresses: [String] @search(by: [hash, regexp])
  placementGroup: String @search(by: [hash, regexp])
  instanceState: String @search(by: [hash, regexp])
  sourceDestCheck: String @search(by: [hash, regexp])
  availabilityZone: String @search(by: [hash, regexp])
  cpuThreadsPerCore: Int @search
  iamInstanceProfile: String @search(by: [hash, regexp])
  deletionProtection: String @search(by: [hash, regexp])
  dailyCost: awsTotalBillingInfo
  primaryNetworkInterface: String @search(by: [hash, regexp])
  metadataOptions: awsEc2MetadataOptions
  metadatasecurityGroupIdsOptions: [String] @search(by: [hash])
  securityGroupIds: [String] @search(by: [hash])
  ephemeralBlockDevice: [awsEc2Blockdevice]
  associatePublicIpAddress: String @search(by: [hash, regexp])
  tags: [Tag]
  alb: [awsAlb] @hasInverse(field: ec2Instance)
  asg: [awsAsg] @hasInverse(field: ec2Instance)
  ebs: [awsEbs] @hasInverse(field: ec2Instance)
  eip: [awsEip] @hasInverse(field: ec2Instance)
  networkInterfaces: [awsNetworkInterface] @hasInverse(field: ec2Instance)
  securityGroups: [awsSecurityGroup] @hasInverse(field: ec2Instance)
  subnet: [awsSubnet] @hasInverse(field: ec2Instance)
  ecsContainer: [awsEcsContainer] @hasInverse(field: ec2Instance)
  emrInstance: [awsEmrInstance] @hasInverse(field: ec2Instance)
}
