type awsAlb @key(fields: "arn") {
  id: String! @search(by: [hash])
  accountId: String! @search(by: [hash])
  arn: String! @id @search(by: [hash, regexp])
  dnsName: String @search(by: [hash, regexp])
  scheme: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  subnets: [String] @search(by: [hash])
  hostedZone: String @search(by: [hash])
  defaultVpc: String @search(by: [hash])
  ipAddressType: String @search(by: [hash])
  idleTimeout: String @search(by: [hash, regexp])
  deletionProtection: String @search(by: [hash])
  http2: String @search(by: [hash])
  accessLogsEnabled: String @search(by: [hash])
  dropInvalidHeaderFields: String @search(by: [hash])
  createdAt: String @search(by: [hash, regexp])
  status: String @search(by: [hash])
  region: String @search(by: [hash, regexp])
  tags: [Tag]
  securityGroups: [awsSecurityGroup] @hasInverse(field: alb)
  ec2Instance: [awsEc2] @hasInverse(field: alb)
  vpc: [awsVpc] @hasInverse(field: alb)
  route53Record: [awsRoute53Record] @hasInverse(field: alb)
  listeners: [awsAlbListener]
  subnet: [awsSubnet] @hasInverse(field: alb)
}

type awsAlbListener
  @generate(
    query: { get: true, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  arn: String! @id @search(by: [hash, regexp])
  settings: awsAlbListenerSettings
}

type awsAlbListenerSettings
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  sslPolicy: String @search(by: [hash, regexp])
  protocol: String @search(by: [hash, regexp])
  rules: [awsAlbListenerRule]
}

type awsAlbListenerRule
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  type: String @search(by: [hash, regexp])
  order: String @search(by: [hash, regexp])
  targetGroupArn: String @search
}
